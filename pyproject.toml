[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mdm"
version = "0.1.0"
description = "ML Data Manager - A standalone, enterprise-grade dataset management system for machine learning"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "MDM Development Team"},
]
keywords = ["machine-learning", "dataset-management", "data-engineering", "ml-ops"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "sqlalchemy>=2.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "pyarrow>=14.0.0",
    "duckdb>=0.9.0",
    "psycopg2-binary>=2.9.0",
    "pyyaml>=6.0",
    "python-dateutil>=2.8.0",
    "scikit-learn>=1.3.0",
    "chardet>=5.0.0",
    "python-magic>=0.4.0",
    "requests>=2.31.0",
    "tqdm>=4.65.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "types-pyyaml>=6.0.0",
    "types-requests>=2.31.0",
    "ipython>=8.0.0",
]

[project.scripts]
mdm = "mdm.cli.main:app"

[project.urls]
Homepage = "https://github.com/mdm-project/mdm"
Documentation = "https://github.com/mdm-project/mdm/tree/main/docs"
Repository = "https://github.com/mdm-project/mdm"
Issues = "https://github.com/mdm-project/mdm/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/mdm"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/docs",
    "/tests",
    "README.md",
    "LICENSE",
]

[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T20", # flake8-print
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"tests/*" = ["T20"]  # Allow print statements in tests

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--cov=mdm",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
branch = true
source = ["src/mdm"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]

[tool.black]
line-length = 100
target-version = ["py39"]
include = '\.pyi?$'